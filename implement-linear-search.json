{
  "slug": "implement-linear-search",
  "title": "Implement Linear Search",
  "c": "#include <stdio.h>\n\nint linear_search(int list[], int listSize, int thingToBeFound) \n{\n    for (int i = 0; i < listSize; i++) \n    {\n        if (list[i] == thingToBeFound) \n        {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main()\n{\n    int ARay[] = { 1, 2, 3, 4, 5 };\n    int sizeOfARay = sizeof(ARay) / sizeof(ARay[0]);\n\n    int FindThis = 4;\n    int foundIT = linear_search(ARay, sizeOfARay, FindThis);\n\n    if (foundIT != -1) \n    {\n        printf(\"Element Found! Element %d was found at index %d.\\n\", FindThis, foundIT);\n    }\n    else \n    {\n        printf(\"ERROR! Element %d was not found in the list.\\n\", FindThis);\n    }\n\n    return 0;\n}\n\n/* Calmly Crafted By Redzwinger */",
  "c-plus-plus": "#include <vector> \n\ntemplate <typename T>\nint linear_search(std::vector<T> list, T val){\n    for(int i = 0; i < list.size(); i++){\n        if(list.at(i) == val){\n            return i;\n        }\n    }\n    return -1;\n};\n\n",
  "java": "public class ImplementLinearSearch {\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        int index = linearSearch(array, 4);\n        System.out.println(index);\n    }\n\n    private static int linearSearch(int[] array, int target) {\n        if (array.length > 0) {\n            for (int i = 0; i < array.length; i++) {\n                if (array[i] == target) return i;\n            }\n        }\n        return -1;\n    }\n}\n",
  "javascript": "const S = [1, 2, 3, 4, 5]\ntarget = 56\n\nconst search = linear_search(S, target)\n\nconsole.log(search)\n\nfunction linear_search(seq, target) {\n      for (let i in seq) {\n            if (seq[i] == target) return i\n      }\n\n      return -1\n}",
  "kotlin": "fun main() {\n    val index = linearSearch(arrayOf(1,2,3,4,5,6,7,8,9,10), 9)\n    println(index)\n}\n\nfun linearSearch(array: Array<Int>, value: Int): Int {\n    for (item in array) {\n        if (item == value) return array.indexOf(item)\n    }\n    return -1\n}\n",
  "rust": "fn linear_search<T: PartialEq>(list: &[T], target: T) -> Option<usize> {\n    for (index, item) in list.iter().enumerate() {\n        if item == &target {\n            return Some(index);\n        }\n    }\n    None\n}\n\nfn main() {\n    let elements = vec![1, 2, 3, 4, 5];\n    let target = 4;\n\n    match linear_search(&elements, target) {\n        Some(index) => println!(\"Found the element {} at index {}\", target, index),\n        None => println!(\"Element {} not found in the list\", target),\n    }\n}\n",
  "typescript": "\nconsole.log(LinearSearch([6, 56, 98, 12], 98))\n\nfunction LinearSearch(sequence: number[], target: number): number {\n      for (let j=0; j < sequence.length; j++) {\n            if (sequence[j] == target) {\n                  return j;               // Target found !\n            }\n      }\n      return -1;                          // Target not found                      \n}\n\n",
  "description": "\n## Write a program to implement linear search\n\nLinear search is a very simple search algorithm. In this type of search, a sequential search is made over all items one by one. Every item is checked and if a match is found then that particular item is returned, otherwise the search continues till the end of the data collection.\r\n\r\nLinear search is the simplest search algorithm. For this reason, it is often called sequential search.\r\n\r\n### Pseudocode\r\n\r\n```text\r\nprocedure linear_search (list, value)\r\n\r\n   for each item in the list\r\n      if match item == value\r\n         return the item's location\r\n      end if\r\n   end for\r\n\r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nlist = [1,2,3,4,5]\r\nvalue = 4\r\n\r\nOutput : 3\r\n```\n\n---\n",
  "trackId": 5289,
  "lastUpdated": "2024-01-17T10:06:01Z",
  "contributors": [
    "Redzwinger",
    "DH4NRAJ",
    "joenjogu",
    "Amedi-Imbira",
    "SnailDragon",
    "harshraj8843"
  ],
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar index = linearSearch([5]int{1, 2, 3, 4, 5}, 4)\n\tfmt.Println(index)\n}\n\nfunc linearSearch(array [5]int, target int) int {\n\tfor i := 0; i < len(array); i++ {\n\t\tif array[i] == target {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n",
  "python": "def main() -> None:\n      \"\"\" Python program to implement linear search \"\"\"\n      S = [1, 2, 3, 4, 5]           # Test cases\n      value = 4\n      \n      \n      search = linear_search(S, value)\n      \n      if search == -1:\n            print('Element not found')\n      else:\n            print(f'Element found at index {search}')\n\n\ndef linear_search(seq: list[int | str], value: int | str) -> int:\n      \"\"\" Linear search function\n\n      Args:\n          seq (_type_): sequence within to perform the search\n          value (_type_): value to be searched\n\n      Returns:\n          int: index (location of value)\n      \"\"\"\n      for j in range(len(seq)):\n            if seq[j] == value:\n                  return j\n      return -1\n            \nif __name__ == '__main__':\n      main()",
  "languages": [
    "c",
    "c-plus-plus",
    "java",
    "javascript",
    "kotlin",
    "rust",
    "typescript",
    "go",
    "python"
  ]
}