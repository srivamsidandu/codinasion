{
  "slug": "implement-ternary-search",
  "title": "Implement Ternary Search",
  "c-plus-plus": "#include <iostream>\nusing namespace std;\n\nint ternarySearch(int ARay[], int size, int value)\n{\n    int l = 0;\n    int r = size - 1;\n\n    while (l <= r) \n    {\n        int halfIsgood = (r - l) / 3;\n        int mid1 = l + halfIsgood;\n        int mid2 = r - halfIsgood;\n\n        if (ARay[mid1] == value) \n        {\n            return mid1;\n        }\n\n        if (ARay[mid2] == value) \n        {\n            return mid2;\n        }\n\n        if (value < ARay[mid1]) \n        {\n            r = mid1 - 1;\n        }\n        else if (value > ARay[mid2]) \n        {\n            l = mid2 + 1;\n        }\n        else \n        {\n            l = mid1 + 1;\n            r = mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\nint main() \n{\n    int ARay[] = { 1, 2, 3, 4, 5 };\n    int size_ARay = sizeof(ARay) / sizeof(ARay[0]);\n    int findThis = 4;\n\n    int ansThing = ternarySearch(ARay, size_ARay, findThis);\n\n    if (ansThing != -1) \n    {\n        cout << \"Element found! It is located at index \" << ansThing << endl;\n    }\n    else \n    {\n        cout << \"ERROR! The given element does not exist in the current array :(\" << endl;\n    }\n\n    return 0;\n}\n\n/* Cautiously Crafted By Redzwinger */",
  "f-sharp": "let rec ternary_search (arr: int array) (value: int) (left: int) (right: int) =\n    if left <= right then\n        let partition_size = (right - left) / 3\n        let mid1 = left + partition_size\n        let mid2 = right - partition_size\n\n        if arr.[mid1] = value then\n            mid1\n        elif arr.[mid2] = value then\n            mid2\n        elif value < arr.[mid1] then\n            ternary_search arr value left (mid1 - 1)\n        elif value > arr.[mid2] then\n            ternary_search arr value (mid2 + 1) right\n        else\n            ternary_search arr value (mid1 + 1) (mid2 - 1)\n    else\n        -1\n\n// Example usage\nlet list = [|1; 2; 3; 4; 5|]\nlet value = 4\n\nlet result = ternary_search list value 0 (Array.length list - 1)\n\nprintfn \"List: %A\" list\nprintfn \"Value to be searched: %d\" value\nprintfn \"Output: %d\" result\n",
  "java": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class ImplementTernarySearch {\n    public static int ternarySearch(int[] arr, int value) {\n        int l = 0;\n        int r = arr.length - 1;\n\n        while (l <= r) {\n            int partitionSize = (r - l) / 3;\n            int mid1 = l + partitionSize;\n            int mid2 = r - partitionSize;\n\n            if (arr[mid1] == value) {\n                return mid1;\n            }\n\n            if (arr[mid2] == value) {\n                return mid2;\n            }\n\n            if (value < arr[mid1]) {\n                r = mid1 - 1;\n            } else if (value > arr[mid2]) {\n                l = mid2 + 1;\n            } else {\n                l = mid1 + 1;\n                r = mid2 - 1;\n            }\n        }\n\n        return -1; \n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the size of the array: \");\n        int size = scanner.nextInt();\n\n        int[] inputArray = new int[size];\n\n        System.out.println(\"Enter the elements of the  array:\");\n        for (int i = 0; i < size; i++) {\n            inputArray[i] = scanner.nextInt();\n        }\n\n        // Sort the array using Arrays.sort()\n        Arrays.sort(inputArray);\n\n        System.out.print(\"Enter the value to search: \");\n        int searchValue = scanner.nextInt();\n\n        int result = ternarySearch(inputArray, searchValue);\n\n        if (result != -1) {\n            System.out.println(\"Element found at index: \" + result);\n        } else {\n            System.out.println(\"Element not found in the array.\");\n        }\n\n        scanner.close(); \n    }\n}",
  "description": "\n## Write a program to implement ternary search\n\nTernary search is a divide and conquer algorithm that can be used to find an element in an array. It is similar to binary search where we divide the array into two parts but in this algorithm, we divide the given array into three parts and determine which has the key (searched element).\r\n\r\n### Pseudocode\r\n\r\n```text\r\nprocedure ternary_search\r\n   A ← sorted array\r\n   value ← value to be searched\r\n   l ← leftmost index\r\n   r ← rightmost index\r\n   \r\n   while l ≤ r do\r\n   \r\n      partition size = (r-l)/3\r\n      mid1 = l + partition_size\r\n      mid2 = r - partition_size\r\n      \r\n      if A[mid1] = value\r\n         return mid1\r\n         \r\n      if A[mid2] = value\r\n         return mid2\r\n         \r\n      if value < A[mid1]\r\n         set r = mid1 - 1\r\n         \r\n      else if value > A[mid2]\r\n         set l = mid2 + 1\r\n         \r\n      else\r\n         set l = mid1 + 1\r\n         set r = mid2 - 1\r\n         \r\n   end while\r\n   \r\n   return -1\r\nend procedure\r\n```\r\n\r\n### Example\r\n\r\n```text\r\nlist = [1,2,3,4,5]\r\nvalue = 4\r\n\r\nOutput : 3\r\n```\n\n---\n",
  "trackId": 5108,
  "lastUpdated": "2024-01-18T16:56:27Z",
  "contributors": [
    "Parvezkhan0",
    "Redzwinger",
    "prathebaAT",
    "harshraj8843"
  ],
  "php": "<?php\n\nfunction ternary_search($arr, $value) {\n    $left = 0;\n    $right = count($arr) - 1;\n\n    while ($left <= $right) {\n        $partition_size = ($right - $left) / 3;\n        $mid1 = $left + $partition_size;\n        $mid2 = $right - $partition_size;\n\n        if ($arr[$mid1] === $value) {\n            return $mid1;\n        }\n\n        if ($arr[$mid2] === $value) {\n            return $mid2;\n        }\n\n        if ($value < $arr[$mid1]) {\n            $right = $mid1 - 1;\n        } elseif ($value > $arr[$mid2]) {\n            $left = $mid2 + 1;\n        } else {\n            $left = $mid1 + 1;\n            $right = $mid2 - 1;\n        }\n    }\n\n    return -1;\n}\n\n// Example usage\n$list = [1, 2, 3, 4, 5];\n$value = 4;\n$result = ternary_search($list, $value);\n\nif ($result !== -1) {\n    echo \"Element found at index: $result\";\n} else {\n    echo \"Element not found in the array\";\n}\n\n?>\n",
  "python": "def ternary_search(arr, value):\n    l, r = 0, len(arr) - 1\n\n    while l <= r:\n        partition_size = (r - l) // 3\n        mid1 = l + partition_size\n        mid2 = r - partition_size\n\n        if arr[mid1] == value:\n            return mid1\n\n        if arr[mid2] == value:\n            return mid2\n\n        if value < arr[mid1]:\n            r = mid1 - 1\n        elif value > arr[mid2]:\n            l = mid2 + 1\n        else:\n            l = mid1 + 1\n            r = mid2 - 1\n\n    return -1\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nvalue = 4\nresult = ternary_search(arr, value)\n\nif result != -1:\n    print(f\"Element {value} found at index {result}\")\nelse:\n    print(f\"Element {value} not found in the array\")\n",
  "r": "ternary_search <- function(A, value) \r\n  {\r\n  l <- 1\r\n  r <- length(A)\r\n  \r\n  while (l <= r) {\r\n    partition_size <- (r - l) / 3\r\n    mid1 <- floor(l + partition_size)\r\n    mid2 <- ceiling(r - partition_size)\r\n    \r\n    if (A[mid1] == value) \r\n      {\r\n      return(mid1 - 1)\r\n    }\r\n    \r\n    if (A[mid2] == value) \r\n      {\r\n      return(mid2 - 1)\r\n    }\r\n    \r\n    if (value < A[mid1]) \r\n      {\r\n      r <- mid1 - 1\r\n    } else if (value > A[mid2]) \r\n      {\r\n      l <- mid2 + 1\r\n    } else \r\n      {\r\n      l <- mid1 + 1\r\n      r <- mid2 - 1\r\n    }\r\n  }\r\n  \r\n  return(-1)\r\n}\r\n\r\nsorted_array <- c(1, 2, 3, 4, 5)\r\nsearch_value <- 4\r\nresult <- ternary_search(sorted_array, search_value)\r\n\r\nif (result == -1) \r\n  {\r\n  cat(\"ERROR! The given element does not exist in the current array :(\\n\")\r\n} else \r\n  {\r\n  cat(\"Element found! It is located at index\", result, \"\\n\")\r\n}\r\n\r\n# Cautiously Crafted By Redzwinger #\r\n",
  "languages": [
    "c-plus-plus",
    "f-sharp",
    "java",
    "php",
    "python",
    "r"
  ]
}