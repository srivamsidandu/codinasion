{
  "slug": "find-lcm-of-two-numbers-by-recursion",
  "title": "Find Lcm Of Two Numbers By Recursion",
  "c": "\n#include <stdio.h>\n\n// function to find min element \n\nint Min(int Num1, int Num2)\n{\n\treturn Num1 >= Num2?Num2:Num1; \n\t\t\t\n}\n\n// function to find lcm of two numbers \nint LCMUtil(int Num1, int Num2, int K)\n{\n\t// If either of the two numbers is 1, return their product\n\n\tif (Num1 == 1 || Num2 == 1)\n\t\treturn Num1 * Num2;\n\n\t// If both the numbers are equal\n\tif (Num1 == Num2)\n\t\treturn Num1;\n\n\t// If K is smaller than the  minimum of the two numbers\n\t\n\tif (K <= Min(Num1, Num2)) {\n\n\n\t\tif (Num1 % K == 0 && Num2 % K == 0) {\n\n\t\t\t\n\t\t\treturn K * LCMUtil(\n\t\t\t\t\t\tNum1 / K, Num2 / K, 2);\n\t\t}\n\n\t\t\n\t\telse\n\t\t\treturn LCMUtil(Num1, Num2, K + 1);\n\t}\n\n\n\telse\n\t\treturn Num1 * Num2;\n}\n\n\nvoid LCM(int N, int M)\n{\n\t// Stores LCM of two number\n\tint lcm = LCMUtil(N, M, 2);\n\n\t// Print LCM\n\tprintf(\"%d\", lcm);\n}\n\n// Driver Code\nint main()\n{\n\n  int N,M; \n  scanf(\"%d\", &N);\n  scanf(\"%d\", &M); \n\n\tLCM(N, M);\n\n\treturn 0;\n}\n",
  "c-plus-plus": "#include <iostream>\n\nusing namespace std;\n\n// Recursive Function calculate hcf of two number\n\nint HcF(int a, int b)\n{\n    return b == 0 ? a : HcF(b, a % b);\n}\n\nint main()\n{\n\n    // Enter the two numbers\n\n    int a, b;\n    cin >> a >> b;\n\n    int hcf = HcF(a, b);\n    int lcm;\n\n    // Finding the lcm by using the formula n1*n2 / hcf\n\n    lcm = (a * b) / hcf;\n\n    cout << \"LCM of \" << a << \" ans \" << b << \" is \" << lcm;\n\n    return 0;\n}",
  "c-sharp": "using System;\n\nclass LCM {\n  static int gcd(int x, int y) {\n    if (y == 0)\n      return x;\n    return gcd(y, x%y);\n  }     \n\n  static void Main(string[] args) {\n    int x = 12;\n    int y = 18;\n\n    int lcm = (x*y)/gcd(x,y);\n\n    Console.WriteLine(\"LCM of \"+ x +\" and \"+ y +\" is: \"+ lcm);\n  }\n}\n",
  "java": "import java.util.*;\nclass FindLcmOfTwoNumbersByRecursion\n{\n  public static int gcd(int a, int b)\n    {\n        if (a == 0)\n            return b;\n        return gcd(b % a, a);\n    }\n  public static int lcm(int a, int b)\n    {\n        return (a / gcd(a, b)) * b;\n    }\n  public static void main(String[] args)\n    {\n      Scanner sc=new Scanner(System.in);\n      System.out.println(\"Enter first number\");\n      int a = sc.nextInt();\n      System.out.println(\"Enter second number\");\n      int b = sc.nextInt();\n      System.out.println(\"lcm : \"+lcm(a, b));\n    }\n}",
  "javascript": "export function findLcmOfTwoNumbersByRecursion(first, second, lcm = 1) {\n  if (lcm % first === 0 && lcm % second === 0) return lcm;\n\n  return findLcmOfTwoNumbersByRecursion(first, second, ++lcm);\n}\n",
  "ruby": "def LCM(a, b, res)\n    if (res % a == 0 && res % b == 0)\n        return res;\n    else\n        LCM(a, b,res + 1);\n    end\nend\n\nprint \"Enter the first number : \";\nnumber1 = gets.chomp.to_i;  \n\nprint \"Enter the second number : \";\nnumber2 = gets.chomp.to_i;  \n\nresult = LCM(number1, number2,1);\n\nprint \"LCM is: \",result;\n",
  "typescript": "function gcd(x: number, y: number): number {\n  if (y === 0) {\n    return x;\n  }\n  return gcd(y, x % y);\n}\n\nconst number1: number = 12;\nconst number2: number = 18;\nconst lcm: number = (number1 * number2) / gcd(number1, number2);\n\nconsole.log(`LCM of ${number1} and ${number2} is: ${lcm}`);\n",
  "description": "\n## Write a program to find lcm of two numbers by recursion\n\nLCM (Least Common Multiple) of two numbers is the smallest number that can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.\n\n```txt\nInput  : 12 18\nOutput : 36\n```\n\n---\n",
  "trackId": 405,
  "lastUpdated": "2023-12-08T04:58:46Z",
  "contributors": [
    "anandfresh",
    "Shaileshalluri",
    "harshraj8843",
    "vishwa-X",
    "ariporat",
    "KarmakarRahul",
    "joao-vitor-souza",
    "MadhuS-1605",
    "AshishSharma1203",
    "sahooankeeta",
    "RShalman",
    "anastazir"
  ],
  "scala": "object FINDLCM extends App{\n    def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)\n\n    def lcm(a: Int, b: Int): Int = if (a == 0 || b == 0) 0 else math.abs(a * b) / gcd(a, b)\n\n    println(s\"LCM of 12 and 18 is: ${lcm(12, 18)}\")\n}\n",
  "go": "package main\n\nimport \"fmt\"\n\nfunc main() {\nvar a, b int\n\tfmt.Println(\"Enter value of a:\")\n\tfmt.Scan(&a)\n\tfmt.Println(\"Enter value of b:\")\n\tfmt.Scan(&b)\n\tfmt.Println(\"LCM of 2 values are:\", lcm(a, b))\n}\nfunc gcd(a int, b int) int {\n\tif a == 0 {\n\t\treturn b\n\t}\n\treturn gcd(b%a, a)\n}\n\nfunc lcm(a int, b int) int {\n\treturn (a / gcd(a, b)) * b\n}\n",
  "php": "<?php \n\nfunction gcd($x, $y)\n{\n    return $x === 0 ? $y : gcd($y % $x, $x);\n}\n\nfunction lcm($x, $y)\n{\n    return ($x / gcd($x, $y)) * $y;\n}\n\necho(lcm(12, 18));\n\n?>\n",
  "perl": "#!/usr/bin/perl -w\nuse strict;\n \nsub gcd {\n  my ($m, $n) = @_;\n  if ($n == 0) {\n    return $m;\n  }\n \n  return gcd($n, $m % $n);\n}\n\nsub lcm {\n  my ($x, $y) = @_;\n  return ($x / gcd($x, $y)) * $y;\n}\n\nprint lcm(12, 18);\n",
  "python": "num1 = 12\nnum2 = 18\n\n\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\n\nprint(\"num1 : \", num1)\nprint(\"num2 : \", num2)\n\nprint(\"Output : \", lcm(num1, num2))\n",
  "r": "# Function to find the GCD (Greatest Common Divisor) using Euclid's algorithm\ngcd <- function(a, b) {\n  if (b == 0) {\n    return(a)\n  } else {\n    return(gcd(b, a %% b))\n  }\n}\n\n# Function to find the LCM (Least Common Multiple) using the GCD\nlcm <- function(a, b) {\n  return (abs(a * b) / gcd(a, b))\n}\n\n# Example usage\nnum1 <- 12\nnum2 <- 18\n\nresult <- lcm(num1, num2)\ncat(\"The LCM of\", num1, \"and\", num2, \"is:\", result, \"\\n\")\n\n",
  "languages": [
    "c",
    "c-plus-plus",
    "c-sharp",
    "java",
    "javascript",
    "ruby",
    "typescript",
    "scala",
    "go",
    "php",
    "perl",
    "python",
    "r"
  ]
}